;; -*- mode: emacs-lisp -*-

(custom-set-variables
 '(column-number-mode t)
 '(display-battery-mode t)
 '(display-time-mode t)
 '(ecb-options-version "2.40")
 '(face-font-family-alternatives (quote (("Monaco" "Consolas" "Monospace")
                                         ("Monaco" "Consolas" "CMU Typewriter Text" "fixed")
                                         ("Geneva" "Sans Serif" "helv" "helvetica" "arial" "fixed")
                                         ("helv" "helvetica" "arial" "fixed"))))
 '(load-home-init-file t t)
 '(rst-adornment-faces-alist (quote ((t . font-lock-keyword-face)
                                     (nil . font-lock-keyword-face)
                                     (1 . font-lock-function-name-face)
                                     (2 . font-lock-function-name-face)
                                     (3 . font-lock-function-name-face)
                                     (4 . font-lock-function-name-face)
                                     (5 . font-lock-function-name-face)
                                     (6 . font-lock-function-name-face)
                                     (1 . font-lock-function-name-face)
                                     (2 . font-lock-function-name-face)
                                     (3 . font-lock-function-name-face)
                                     (4 . font-lock-function-name-face)
                                     (5 . font-lock-function-name-face)
                                     (6 . font-lock-function-name-face))))
 '(safe-local-variable-values (quote ((Syntax . ANSI-Common-Lisp) (Base . 10) (encoding . utf-8))))
 '(semantic-c-dependency-system-include-path (quote ("/usr/include" "/usr/include/gtk-2.0")))
 '(semantic-idle-scheduler-no-working-message nil)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify)))

(setq font-use-system-font t)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil
                         :stipple nil
                         :background "gray12"
                         :foreground "green"
                         :inverse-video nil
                         :box nil
                         :strike-through nil
                         :overline nil
                         :underline nil
                         :slant normal
                         :weight normal
                         :height 98
                         :width normal
                         :foundry "unknown"
                         :family "Monaco"))))
 '(cursor ((t (:background "cyan" :foreground "gray"))))
 '(mode-line ((t (:background "grey75"
                              :foreground "#3d3d3d"
                              :inverse-video t
                              :box (:line-width 1 :color "#000000" :style released-button)
                              :slant normal
                              :weight normal
                              :height 100
                              :family "Geneva"))))
 '(rst-level-1-face ((t (:embolden t))) t)
 '(sr-active-path-face ((t (:background "#333333" :foreground "yellow" :weight bold :height 120))))
 '(sr-compressed-face ((t (:foreground "#AAAAAA"))))
 '(sr-directory-face ((t (:foreground "magenta" :weight bold))))
 '(sr-editing-path-face ((t (:background "#444444" :foreground "yellow" :weight bold :height 120))))
 '(sr-highlight-path-face ((t (:background "#444444" :foreground "#ace6ac" :weight bold :height 120))))
 '(sr-packaged-face ((t (:foreground "DarkCyan"))))
 '(sr-passive-path-face ((t (:background "#333333" :foreground "lightgray" :weight bold :height 120))))

 ;; '(tabbar-default ((((class color grayscale) (background dark))
 ;;                    (:background "gray25" :foreground "grey75"
 ;;                                 :weight bold :height 100 :family "Geneva"))))
 ;; '(tabbar-selected ((t (:inherit tabbar-default :foreground "green"
 ;;                                 :box (:line-width 1 :color "white" :style pressed-button)))))
 )

;;
;; Main config
;;
(require 'package)

(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/"))

;; Add all the load-path
(setq *elpa-package-dir* "~/.emacs.d/elpa/")
(mapc '(lambda (dir)
         (add-to-list 'load-path (format "%s%s" *elpa-package-dir* dir)))
      (directory-files *elpa-package-dir* nil ".*"))

;;; Load basic functions

(load "~/.elisp/custom-els/custom-functions.el")

(defun $load-custom-emacs24 (&rest filenames)
  "Load customization file"
  (dolist (file filenames)
    (load (format "%s%s" "~/.elisp/emacs24/" file))))

;;
;; Load basic features
;;

(setq server-name "e24")

($load-custom-el "custom-aliases.el"
                 "custom-macros.el"
                 )

($load-custom-emacs24 "settings.el"
                      )

;; Load themes
(require 'color-theme)
(require 'color-theme-monokai)
(require 'solarized)
;;(require 'monokai)
(color-theme-monokai)
;; (load-theme 'solarized-light)

;;
;; Load features
;;

;; Vim keybindings
(load-library "evil")
;; (evil-mode 1)

;; Smooth scrolling
(require 'smooth-scrolling)

;; Scheme
(require 'quack)
(require 'scheme-complete)
(autoload 'scheme-get-current-symbol-info "scheme-complete" nil t)
(add-hook 'scheme-mode-hook
  (lambda ()
    (make-local-variable 'eldoc-documentation-function)
    (setq eldoc-documentation-function 'scheme-get-current-symbol-info)
    (eldoc-mode)))
(setq lisp-indent-function 'lisp-indent-function)
;; common-lisp-indent-function
(autoload 'scheme-smart-complete "scheme-complete" nil t)
;;; (eval-after-load 'scheme
;;;   '(define-key scheme-mode-map "\e\t" 'scheme-smart-complete))
(eval-after-load 'scheme
  '(define-key scheme-mode-map "\t" 'scheme-complete-or-indent))

;;
;; Lua mode
;;
(require 'lua-mode)

;;
;; CMake
;;
(require 'cmake-mode)
(setq auto-mode-alist
      (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode))
              auto-mode-alist))

;;
;; Smalltalk mode
;;
;; (load "/usr/share/emacs/site-lisp/gnu-smalltalk/smalltalk-mode.el")
;; (require 'smalltalk-mode)

;;
;; Helm mode
;;
(require 'helm-config)

;;
;; ido
;;
(require 'ido)
(ido-mode t)
(setq ido-enable-regexp t
      ido-enable-flex-matching t
      ido-enable-tramp-completion nil
      ido-use-filename-at-point nil
      ido-enable-list-directory-history nil
      confirm-nonexistent-file-or-buffer nil
      ido-create-new-buffer 'always)
(ido-everywhere 1)

;; Enhanced ido and supporting M-x
(require 'smex)
(smex-initialize)

;; Redo mode
(require 'redo+)

;; Auto closing brackets
(require 'autopair)
(add-hook 'find-file-hook (lambda () (autopair-mode 1)))

;;
;; Jam
;;
;; (require 'jam-mode)

;;
;; Markdown
;;
(require 'markdown-mode)
($auto-load-mode '("\\.md$" "\\.markdown$") 'markdown-mode)

;; Zen-coding for CSS-selector-style HTML generation
(require 'zencoding-mode)
(add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes

;;
;; PHP mode
;;
;; (require 'php-mode)
;; (add-hook 'php-mode-hook
;;           '(lambda ()
;;              (define-abbrev php-mode-abbrev-table "ex" "extends")))

;;
;; Golang mode
;;
(add-to-list 'load-path "/mnt/Workspace/go/misc/emacs")
(require 'go-mode-load)

;; Clojure and ClojureScript
;; (require 'clojure-mode)
;; (require 'clojurescript-mode)
;; (require 'cljdoc)

;; ibus-mode
;;;; IBusMode
(load-file "~/src/elisp/ibus-el/ibus.el/ibus-dev.el")
;; (add-to-list 'load-path "~/src/elisp/ibus-el/ibus.el")
(require 'ibus)
;; Turn on ibus-mode automatically after loading .emacs
(add-hook 'after-init-hook 'ibus-mode-on)
;; Use C-SPC for Set Mark command
(ibus-define-common-key ?\C-\s nil)
;; Use C-/ for Undo command
(ibus-define-common-key ?\C-/ nil)
;; Change cursor color depending on IBus status
(setq ibus-cursor-color '("red" "blue" "limegreen"))
(setq ibus-agent-file-name "~/src/elisp/ibus-el/ibus.el/ibus-el-agent")

;;
;; CEDET
;;
;; (require 'cedet)
;; (require 'cedet-global)
;; (require 'semantic)
;; ;; (semantic-load-enable-primary-exuberent-ctags-support)
;; ;; ;;; GCC supporting
;; ;; (require 'eassist)
;; ;; (require 'semanticdb)
;; ;; (require 'semanticdb-global)
;; (require 'speedbar)
;; ;; (global-ede-mode 1)                   ; Enable the Project management system
;; ;; (semantic-load-enable-code-helpers)   ; Enable prototype help and smart completion
;; (require 'srecode)
;; ;; (global-srecode-minor-code 1)         ; Enable template insertion menu
;; (global-semantic-idle-completions-mode 1)
;; (global-semantic-idle-scheduler-mode 1)
;; (global-semantic-idle-summary-mode 1)

;;
;; Apache mode
;;
(require 'apache-mode)
($auto-load-mode '("sites-\\(available\\|enabled\\)/"
                   "access\\.conf\\'"
                   "srm\\.conf\\'"
                   "httpd\\.conf\\'"
                   "\\.htaccess\\'") 'apache-mode)

;;
;; OCaml mode
;;
;; (require 'tuareg)
;; (add-hook 'tuareg-mode-hook 'tuareg-imenu-set-imenu)
;; (autoload 'tuareg-mode "tuareg" "Major mode for editing OCaml code" t)
;; (autoload 'tuareg-run-ocaml "tuareg" "Run an inferior OCaml process." t)
;; (autoload 'ocamldebug "ocamldebug" "Run the OCaml debugger" t)
;; ($auto-load-mode '("\\.ml[iylp]?$" "\\.topml$") 'tuareg-mode)

;; (setq tuareg-default-indent 4)
;; (setq tuareg-with-indent 2)
;; (setq tuareg-|-extra-unindent 2)

;; Multi-major mode
(require 'mmm-mode)
(setq mmm-global-mode 'maybe
      mmm-submode-decoration-level 2)
(set-face-background 'mmm-default-submode-face "gray30")
(mmm-add-classes
 '((js-in-html
    :submode javascript-mode
    :front "<script[^>]*>\n"
    :back "</script>")))
(mmm-add-mode-ext-class nil "\\.s?html?\\(\\..+\\)?$" 'js-in-html)

;; Haml mode
(require 'haml-mode)
;; Automatically compile haml file to html
(add-hook 'after-save-hook '$compile-haml)

;; node.js HTML template jade-mode
;; (require 'jade-mode)

;; node.js CSS template jade-mode
(require 'stylus-mode)

;; Scss and sass mode
(require 'sass-mode)
(require 'scss-mode)

;;
;; Rinari mode for Ruby on Rails
;;
(require 'rinari)
;; (require 'ido)
;; (ido-mode t)

;;
;; RSense for Ruby smart completion
;;
(setq rsense-home "/home/cmpitg/opt/rsense")
(add-to-list 'load-path (concat rsense-home "/etc"))
(require 'rsense)

;;
;; Scala mode
;;
;; (require 'scala-mode)

;; Tabbar
($add-load-path "~/src/elisp/tabbar/")
(require 'tabbar)
(tabbar-mode 1)
;; (global-set-key (kbd "<f5>") 'tabbar-backward)
;; (global-set-key (kbd "<f7>") 'tabbar-forward)
(custom-set-faces
 (list 'tabbar-default '((t (:foreground "gray60"
                             :background "black"
                             :weight bold
                             :height 100
                             :family "Segoe UI"))))

 (list 'tabber-unselected-face '((t (:inherit tabbar-default
                                     :background "gray30"
                                     :foreground "gray85"
                                     :box nil))))

 (list 'tabbar-selected '((t (:inherit tabbar-default
                             :background "black"
                             :foreground "#f2f2f6"
                             :box nil))))

 (list 'tabbar-unselected-face '((t (:inherit tabbar-default
                                    :box '(:line-width 1 :color "gray72"
                                           :style released-button)))))

 (list 'tabbar-separator-face '((nil (:height 0.7)))))

;;
;; CoffeeScript mode
;;
(require 'coffee-mode)
(add-hook 'after-save-hook '$compile-coffee)
($auto-load-mode '("Cakefile" "\\.coffee$") 'coffee-mode)
(setq whitespace-action '(auto-cleanup)) ;; automatically clean up bad whitespace
(setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab)) ;; only show bad whitespace
(defun coffee-custom ()
  "coffee-mode-hook"

  ;; CoffeeScript uses two spaces.
  (make-local-variable 'tab-width)
  (set 'tab-width 2))
(add-hook 'coffee-mode-hook 'coffee-custom)

;;
;; LiveScript mode
;;
($add-load-path "~/src/elisp/livescript-mode/")
(require 'livescript-mode)
(add-hook 'after-save-hook '$compile-livescript)
;; ($auto-load-mode '("\\.ls$") 'livescript-mode)
;($auto-load-mode '("\\.ls$") 'coffee-mode)
($auto-load-mode '("\\.ls$") 'livescript-mode)
(setq whitespace-action '(auto-cleanup)) ;; automatically clean up bad whitespace
(setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab)) ;; only show bad whitespace

;;
;; Highlight parentheses
;;
(require 'paren)
;; (set-face-background 'show-paren-match-face (face-background 'default))
(set-face-background 'show-paren-match-face "green")
(set-face-foreground 'show-paren-match-face "blue")
(set-face-attribute 'show-paren-match-face nil :weight 'extra-bold)
;; (require 'highlight-parentheses)
;; ;; With autopair
;; (add-hook 'highlight-parentheses-mode-hook
;;           '(lambda ()
;;              (setq autopair-handle-action-fns
;;                    (append
;; 					(if autopair-handle-action-fns
;; 						autopair-handle-action-fns
;; 					  '(autopair-default-handle-action))
;; 					'((lambda (action pair pos-before)
;; 						(hl-paren-color-update)))))))
;; ;; Globally
;; (define-globalized-minor-mode global-highlight-parentheses-mode
;;   highlight-parentheses-mode
;;   (lambda ()
;;     (highlight-parentheses-mode t)))
;; (global-highlight-parentheses-mode t)

;;
;; Snippet mode
;;
(require 'yasnippet)
(yas/global-mode 1)
(setq yas/root-directory '("~/.elisp/mysnippets"))
;; Load all the directories snippets
(mapc 'yas/load-directory yas/root-directory)

;;
;; Ack - a new grep
;;
(require 'ack-and-a-half)
(autoload 'ack-and-a-half-same "ack-and-a-half" nil t)
(autoload 'ack-and-a-half "ack-and-a-half" nil t)
(autoload 'ack-and-a-half-find-file-same "ack-and-a-half" nil t)
(autoload 'ack-and-a-half-find-file "ack-and-a-half" nil t)
(defalias 'ack 'ack-and-a-half)
(defalias 'ack-same 'ack-and-a-half-same)
(defalias 'ack-find-file 'ack-and-a-half-find-file)
(defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)

;;
;; Yaml mode
;;
(require 'yaml-mode)
($auto-load-mode '("\\.yml$") 'yaml-mode)

;;
;; Lorem Ipsum text
;;
(require 'lorem-ipsum)

;;
;; Vala mode
;;
;; (autoload 'vala-mode "vala-mode" "Major mode for editing Vala code." t)
;; ($auto-load-mode '("\\.vala$") 'vala-mode)

;;
;; org-mode
;;
(require 'org)
(require 'org-install)
(setq org-agenda-files
      (list "~/Org/todo.org"))
(define-key org-mode-map (kbd "<C-delete>") 'org-todo)
(define-key org-mode-map (kbd "<C-S-delete>") 'org-deadline)
(global-set-key (kbd "s-!") 'org-agenda)
(global-set-key (kbd "s-#") 'org-store-link)
(global-set-key (kbd "s-`") 'org-insert-link)
;; M-S-<return> new todo
;; C-c C-l insert link
;; C-c C-s schedule
;; C-c l store link, to be later inserted with C-c C-l


;;
;; Emacs window manager
;;
(require 'e2wm)
(global-set-key (kbd "M-+") 'e2wm:start-management)
(global-set-key (kbd "M--") 'e2wm:stop-management)


;;
;; Auto complete
;;
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(add-to-list 'ac-dictionary-directories "~/.elisp/ac-dict")
(ac-config-default)
;; (setq ac-auto-start nil)
(ac-set-trigger-key "<s-return>")
(add-to-list 'ac-user-dictionary "cmpitg@gmail.com")

;;
;; Japanese
(require 'ac-ja)
;;
;; For dabbrev
(require 'ac-dabbrev)
(add-to-list 'ac-sources 'ac-source-dabbrev)
;;
;; For Python
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)
(ac-ropemacs-initialize)
(add-hook 'python-mode-hook
          (lambda ()
            (set-variable 'py-indent-offset 4)
            (set-variable 'indent-tabs-mode nil)
            (auto-fill-mode 1)
            (set-fill-column 78)
            (add-to-list 'ac-sources 'ac-source-ropemacs)))
;;
;; For Ruby
(add-hook 'ruby-mode-hook
          (lambda ()
            (add-to-list 'ac-sources 'ac-source-rsense-method)
            (add-to-list 'ac-sources 'ac-source-rsense-constant)))

;;
;; Haskell mode
;;

;; (require 'haskell-mode)
;; (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
;; (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

;; (require 'inf-haskell)

;; (define-key haskell-mode-map (kbd "<f1>") 'haskell-hoogle)

;; (defun haskell-unicode ()
;;  (substitute-patterns-with-unicode
;;   (list (cons "\\(<-\\)" 'left-arrow)
;;         (cons "\\(->\\)" 'right-arrow)
;;         (cons "\\(==\\)" 'identical)
;;         (cons "\\(/=\\)" 'not-identical)
;;         (cons "\\(()\\)" 'nil)
;;         (cons "\\<\\(sqrt\\)\\>" 'square-root)
;;         (cons "\\(&&\\)" 'logical-and)
;;         (cons "\\(||\\)" 'logical-or)
;;         (cons "\\<\\(not\\)\\>" 'logical-neg)
;;         (cons "\\(>\\)\\[^=\\]" 'greater-than)
;;         (cons "\\(<\\)\\[^=\\]" 'less-than)
;;         (cons "\\(>=\\)" 'greater-than-or-equal-to)
;;         (cons "\\(<=\\)" 'less-than-or-equal-to)
;;         (cons "\\<\\(alpha\\)\\>" 'alpha)
;;         (cons "\\<\\(beta\\)\\>" 'beta)
;;         (cons "\\<\\(gamma\\)\\>" 'gamma)
;;         (cons "\\<\\(delta\\)\\>" 'delta)
;;         (cons "\\(''\\)" 'double-prime)
;;         (cons "\\('\\)" 'prime)
;;         (cons "\\(!!\\)" 'double-exclamation)
;;         (cons "\\(\\.\\.\\)" 'horizontal-ellipsis))))

;; ;; (add-hook 'haskell-mode-hook 'haskell-unicode)
;; ($auto-load-mode '("\\.hs$") 'haskell-mode)

;;
;; Emacs Code Browser
;;
;; (setq stack-trace-on-error t)
;; (require 'ecb-autoloads)
;; (require 'ecb)
;; (setq ecb-primary-secondary-mouse-buttons 'mouse-1--mouse-2)
;; (setq ecb-source-path
;;       '(("/home/cmpitg/tmp/" "tmp")
;;         ("/home/cmpitg/test/" "test")
;;         ;; ("/mnt/Workspace/Projects/src/repo/iway-training-materials/" "iw-train-mats")
;;         ("/home/cmpitg/.elisp/custom-els/" "custom-els")
;;         ;; ("/mnt/Workspace/Projects/src/repo/clojure" "clojure")
;;         ;; ("/mnt/Workspace/Projects/src/elisp" "elisp")
;;         ("/mnt/Workspace/Projects/src/repo/wmii" "wmii")
;;         ("/mnt/Workspace/Projects/src/repo/wmname" "wmname")
;;         ))
;;; Which files will (not) be shown in ECB
;;; ecb-source-file-regexps
;; (setq ecb-layout-name "left8")
;;; "left1" -- Tree, Sources & History, Functions
;;; "left2" -- Tree, Sources
;;; "left3" -- Tree, Sources, Functions
;;; "left4" -- Tree, Sources & History
;;; "left5" -- Tree, Sources, History
;;; "left6" -- Sources, Functions, History
;;; "left7" -- Tree, History, Functions
;;; "left8" -- Tree, Sources, Functions, History
;;; "left9" -- Functions
;;; "left10" -- Functions, Sources & History
;;; "left11" -- Functions, History
;;; "left12" -- History
;;; "left13" -- Tree
;;; "left14" -- Tree, History
;;; "left15" -- Tree, Functions
(setq ecb-layout-name "left13")
(setq ecb-toggle-layout-sequence
      '("left15" "left3" "left13" "left12" "left9"))
;; (setq ecb-toggle-layout-sequence
;;       '("left2" "left3" "left4" "left5" "left6" "left7" "left8"
;;         "left9" "left10" "left11" "left12" "left13" "left14" "left15"))
;; (setq ecb-toggle-layout-sequence
;;       '("left3" "left1" "left2" "left8" "left9" "left12" "left13" "left15"))
;;; call with ecb-toggle-layout


;;
;; Gentoo specific features
;;
(require 'site-gentoo)

;; Lastly...
;;; Automatically make executable script
(add-hook 'after-save-hook '$make-executable)
($load-custom-el "keymap-ergo.el")
($load-custom-emacs24 "keymap.el"
                      "keymap-extended.el"
                      )

;; Eldoc mode
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
